<?php

/**
 * @file
 */

/**
 * Drupal hook implementations.
 */

/**
 * Implements hook_menu().
 */
function rooms_channel_manager_menu() {
  $items = array();

  $items['admin/rooms/units/unit/%rooms_unit/channel-management'] = array(
    'title' => 'Channel Management',
    'page callback' => 'rooms_channel_manager_admin',
    'page arguments' => array(4),
    'access arguments' => array('administer rooms channel management'),
    'type' => MENU_LOCAL_TASK,
    'weight' => '20',
  );

  return $items;
}

/**
 * Implements hook_permission()
 */
function hook_permission() {
  return array(
    'administer rooms channel management' => array(
      'title' => t('Administer Rooms Channel Management'),
      'description' => t('Administer Channel management tasks.'),
    ),
  );
}

/**
 * Implements hook_page_alter().
 *
 * Add channel management forms to unit availability management page.
 */
function rooms_channel_manager_admin($unit) {
  $forms = array();

  // If this is a rooms unit, load unit source forms.
  if (is_object($unit)) {

    // Get enabled availability sources.
    foreach (module_invoke_all('rooms_channel_source') as $source) {
      $importer = new $source['handler']['class'];
      $importer->config->unit_id = $unit->unit_id;
      $importer->load();

      $form = $importer->config_form();
      $form['class'] = array(
        '#type' => 'hidden',
        '#value' => $source['handler']['class'],
      );
      $form_id = $source['handler']['class'] . '_config_form';
      $form_state = form_state_defaults();
      if (!isset($form_state['input'])) {
        $form_state['input'] = $form_state['method'] == 'get' ? $_GET : $_POST;
      }
      $form_state['validate_handlers'] = array('rooms_channel_manager_config_form_validate');
      $form_state['submit_handlers'] = array('rooms_channel_manager_config_form_submit');
      drupal_prepare_form($form_id, $form, $form_state);
      drupal_process_form($form_id, $form, $form_state);
      $forms[] = $form;
    }
  }

  return $forms;
}

/**
 * Implements hook_cron()
 */
function rooms_channel_manager_cron() {
  $queue = DrupalQueue::get('rooms_channel_manager');
  foreach (module_invoke_all('rooms_channel_source') as $source) {
    $result = db_query("SELECT unit_id FROM {rooms_channel_manager_sources} WHERE module = :module", array(':module' => $source['handler']['module']));
    foreach ($result as $record) {
      $queue->createItem(array('unit_id' => $record->unit_id, 'class' => $source['handler']['class']));
    }
  }
}

/**
 * Implements hook_cron_queue_info()
 */
function rooms_channel_manager_cron_queue_info() {
  $queues['rooms_channel_manager'] = array(
    'worker callback' => 'rooms_channel_manager_update_availability',
    'time' => 60,
  );
  return $queues;
}

/**
 * Implements hook_mail.
 */
function rooms_channel_manager_mail($key, &$message, $params) {
  $options = array(
    'langcode' => $message['language']->language,
  );

  $message['subject'] = t('Booking conflict detected for @site-name!', array('@site-name' => variable_get('site_name', 'Drupal')), $options);
  $message['body'][] = t('A conflict was detected when attempting to import the following booking from @source', array('@source' => $params['source']), $options);
  $message['body'][] = t('Summary: ') . check_plain($params['summary']);
  $message['body'][] = t('Booking dates: ') . check_plain($params['booking_dates']);
  if (isset($params['link'])) {
    $message['body'][] = t('External link: ') . check_plain($params['link']);
  }

  switch ($key) {
    case 'booking_conflict_detected':
      break;
    case 'booking_unconfirmed_conflict_detected':
      $message['body'] = array();
      $message['body'][] = t('A conflict with an unconfirmed event was detected when attempting to import the following booking from @source', array('@source' => $params['source']), $options);
      $message['body'][] = t('Summary: ') . check_plain($params['summary']);
      $message['body'][] = t('Booking dates: ') . check_plain($params['booking_dates']);
      if (isset($params['link'])) {
        $message['body'][] = t('External link: ') . check_plain($params['link']);
      }
      break;
  }
}

/**
 * Implements hook_form_FORMID_alter()
 *
 * Add information to external booking form.
 */
function rooms_channel_manager_form_rooms_booking_edit_form_alter(&$form, &$form_state) {
  if ($form['#entity']->type == 'external_booking') {
    $data = unserialize($form['#entity']->data);
    if (isset($data['service'])) {
      $form['source'] = array(
        '#weight' => -23,
        '#markup' => '<strong>' . t('External booking source: ') . '</strong>' . $data['service'],
      );
    }
  }
}

/**
 * Custom functionality.
 */

/**
 * Wrapper function - execute validation handler for configuration forms in
 * source classes.
 */
function rooms_channel_manager_config_form_validate($form, &$form_state) {
  $importer = new $form['class']['#value'];
  if (method_exists($importer, 'config_form_validate')) {
    $importer->config_form_validate($form, $form_state);
  }
}

/**
 * Wrapper function - execute submission handler for configuration forms in
 * source classes.
 */
function rooms_channel_manager_config_form_submit($form, &$form_state) {
  $importer = new $form['class']['#value'];
  if (method_exists($importer, 'config_form_submit')) {
    $importer->config_form_submit($form, $form_state);
  }
}

/**
 * Cron queue callback - update availability from remote source.
 */
function rooms_channel_manager_update_availability($data) {
  if (isset($data['class'])) {
    $importer = new $data['class'];
    $importer->config->unit_id = $data['unit_id'];
    $importer->load();
    if ($importer->updateNeeded()) {
      $importer->importBookingsFromSource();
    }
  }
}

/**
 * Get a unique username.
 */
function rooms_channel_manager_unique_username($name, $uid = 0) {

  // Strip illegal characters.
  $name = preg_replace('/[^\x{80}-\x{F7} a-zA-Z0-9@_.\'-]/', '', $name);

  // Strip leading and trailing spaces.
  $name = trim($name);

  // Convert any other series of spaces to a single underscore.
  $name = preg_replace('/ +/', '_', $name);

  // If there's nothing left use a default.
  $name = ('' === $name) ? t('user') : $name;

  // Truncate to reasonable size.
  $name = (drupal_strlen($name) > (USERNAME_MAX_LENGTH - 10)) ? drupal_substr($name, 0, USERNAME_MAX_LENGTH - 11) : $name;

  // Iterate until we find a unique name.
  $i = 0;

  do {
    $new_name = empty($i) ? $name : $name . '_' . $i;
    $found = db_query_range("SELECT uid from {users} WHERE uid <> :uid AND name = :name", 0, 1, array(':uid' => $uid, ':name' => $new_name))->fetchAssoc();
    $i++;
  } while (!empty($found));

  return $new_name;
}
